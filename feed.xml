<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://drivel.karuken.quest/feed.xml" rel="self" type="application/atom+xml"/><link href="https://drivel.karuken.quest/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-01-14T09:45:41+00:00</updated><id>https://drivel.karuken.quest/feed.xml</id><title type="html">karuken</title><subtitle>Just another blog - more of a gist collection really, might be useful though. </subtitle><entry><title type="html">Use boostrap icons on a website</title><link href="https://drivel.karuken.quest/blog/2023/bootstrap-icons/" rel="alternate" type="text/html" title="Use boostrap icons on a website"/><published>2023-12-31T00:00:00+00:00</published><updated>2023-12-31T00:00:00+00:00</updated><id>https://drivel.karuken.quest/blog/2023/bootstrap-icons</id><content type="html" xml:base="https://drivel.karuken.quest/blog/2023/bootstrap-icons/"><![CDATA[<p>There are plenty of icon libraries out there to use with website development. Popular choices are <a href="https://feathericons.com/">feather icons</a> and <a href="https://fontawesome.com/search">fontawesome</a> which I used up until now.</p> <p>Feather icons is open source but only offers around 300 icons. This is a good choice for smaller projects, that only need a few icons.</p> <p>Fontawesome offers 30000 icons (not sure how they count variants) but only a small subset of those is free.</p> <p>I stumbled over the new (2023) <a href="https://icons.getbootstrap.com/?q=foo">icon set from bootstrap</a> which seems to offer a reasonable middle ground by offering a growing list of (currently) 2000 icons, all of which are available as font and svg variants. Here I go over how to use them.</p> <p>The <a href="https://icons.getbootstrap.com/">bootstrap icon website</a> isn’t very starter friendly unfortunately, since the usage section is hidden below the long list of icons and once there, it presents the most uncommon, verbose usage options first and only later the classic usage with the icon tag. Once you get over that, it’s great and straight-forward to use.</p> <p>Alternatively, bootstrap icons can be accessed via the <a href="https://github.com/twbs/icons">bootstrap icons github repository</a>.</p> <p>To serve the icons over my own server rather than relying on a CDN (also this allows direct use of svg icons in js, editing icons etc.) install them via npm in your project.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i <span class="nt">--save</span> bootstrap-icons
</code></pre></div></div> <p>Then I can include the bootstrap-icons stylesheet on my website in the main bootstrap scss file, for example in <code class="language-plaintext highlighter-rouge">site-bootstrap.scss</code>.</p> <div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@import</span> <span class="s2">"~bootstrap-icons/font/bootstrap-icons.css"</span><span class="p">;</span>
</code></pre></div></div> <p>Of course this step requires some sort of scss pre-processing like in a webpack pipeline or like it is automatically included in jekyll.</p> <p>Once the scss preprocessor has run, you can use the icons in the usual manner:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">"bi-alarm"</span> <span class="na">style=</span><span class="s">"font-size: 2rem; color: cornflowerblue;"</span><span class="nt">&gt;&lt;/i&gt;</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="frontend"/><category term="web-development"/><category term="bootstrap"/><summary type="html"><![CDATA[Boostrap icons with npm]]></summary></entry><entry><title type="html">Showing directory structure with tree</title><link href="https://drivel.karuken.quest/blog/2023/showing-directory-structure-tree/" rel="alternate" type="text/html" title="Showing directory structure with tree"/><published>2023-12-11T00:00:00+00:00</published><updated>2023-12-11T00:00:00+00:00</updated><id>https://drivel.karuken.quest/blog/2023/showing-directory-structure-tree</id><content type="html" xml:base="https://drivel.karuken.quest/blog/2023/showing-directory-structure-tree/"><![CDATA[<p><code class="language-plaintext highlighter-rouge">tree</code> is a command line utility to display directory structures in ascii-art-style.</p> <p>It’s got a ton of configuration options. Here are the most useful options:</p> <dl> <dt>Option <code class="language-plaintext highlighter-rouge">-L</code></dt> <dd><code class="language-plaintext highlighter-rouge">-L n</code> allows to specify the number of levels that tree will display. This does <em>not</em> limit the number of files, so be careful if the directory tree contains folders with lots of files.</dd> <dt>Option <code class="language-plaintext highlighter-rouge">--gitignore</code></dt> <dd>Will use a .gitignore file, if present and include the contained rules to filter the result. However, directories and files starting with <code class="language-plaintext highlighter-rouge">.</code> are not shown by default.</dd> <dt>Option <code class="language-plaintext highlighter-rouge">-d</code></dt> <dd>Will only show directories, not files.</dd> </dl>]]></content><author><name></name></author><category term="cli"/><category term="linux"/><summary type="html"><![CDATA[Most important tree options and commands to show directory structures]]></summary></entry><entry><title type="html">Quick setup for django pegasus</title><link href="https://drivel.karuken.quest/blog/2023/quick-setup-django-pegasus/" rel="alternate" type="text/html" title="Quick setup for django pegasus"/><published>2023-12-10T00:00:00+00:00</published><updated>2023-12-10T00:00:00+00:00</updated><id>https://drivel.karuken.quest/blog/2023/quick-setup-django-pegasus</id><content type="html" xml:base="https://drivel.karuken.quest/blog/2023/quick-setup-django-pegasus/"><![CDATA[<p><a href="https://www.saaspegasus.com/projects/">SaaS Pegasus</a> is a configurable (commercial) template for django. There is good <a href="https://docs.saaspegasus.com/">official documentation</a> available from the software author.</p> <p>The author also provides great <a href="https://www.saaspegasus.com/guides/">guides on how the use django in a modern webstack</a> with a plethora of backend and frontend options from APIs over django core functionality to modern frontends like react, vue or htmx. I highly recommend to read through the guides if you want to better understand choices and tradeoffs in modern webstacks, in particular from a django perspective.</p> <p>SaaS Pegasus is a pretty good starting point for a django project that will come out of the box configured with many things you otherwise might have to set up manually. For example user management, different frontend options and backend options can be configured out of the box with reasonable choices and example code ready for use.</p> <p>However some finer points regarding configuration choices are a bit hidden in the docs and additionally I prefer to use a bit of a different setup in some details. So here are my notes for exactly that purpose.</p> <p>So these notes are most likely only useful for you, if you have bought access to SaaS Pegasus and want to, for example use <code class="language-plaintext highlighter-rouge">python poetry</code> to manage the environment instead of <code class="language-plaintext highlighter-rouge">venv</code> which is covered in the official docs.</p> <h2 id="initialization-from-pegasus">Initialization from pegasus</h2> <p>Starting a new pegasus project, is straight forward for the most part, just log into the web interface, give your project a name, pick some options, download it and you are good to go.</p> <p>Here I go into some consequences for the available options and explain alternatives (e.g. <code class="language-plaintext highlighter-rouge">poetry</code> instead of <code class="language-plaintext highlighter-rouge">venv</code>).</p> <h3 id="configuration-in-pegasus">Configuration in pegasus</h3> <p>There are a couple of setting that are not very obvious in their consequences:</p> <dl> <dt>Option <code class="language-plaintext highlighter-rouge">Example pages</code></dt> <dd>Pulling in example pages results in a much larger code base. If you just want to inspect them, it’s better to look at them in a separate project.</dd> <dt>Option <code class="language-plaintext highlighter-rouge">Include static files</code></dt> <dd>This pulls in static css and js files of the chosen frontend framework as opposed to pulling in only the sass files and generate the css on-the-fly. If changes to css via sass are planned, then it’s better to leave this unchecked and follow the instructions in the docs under <a href="https://docs.saaspegasus.com/front-end/">https://docs.saaspegasus.com/front-end/</a>. This will require setting up npm and running the webpack compiler whenever the css changes. The same goes for <code class="language-plaintext highlighter-rouge">webpack</code>: if the static files are included there is no webpack setup, for example if you want to include your own javascript.</dd> </dl> <h3 id="git--github">git / github</h3> <p>Configure and download project, unpack and run:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
git add <span class="nb">.</span>
git commit <span class="nt">-am</span> <span class="s2">"initial project creation"</span>
git branch pegasus  <span class="c"># for easy merging of future updates</span>
git branch <span class="nt">-M</span> main
<span class="c"># head over to github (or whereever) and create repo</span>
git remote add origin https://&lt;created-github-repo&gt;
</code></pre></div></div> <p>In case remote and local default branches have different names, you can rename the local branch <code class="language-plaintext highlighter-rouge">git branch -m master main</code>. If pushing to main doesn’t recognize the branch right away it’s possible to set it explicitly using <code class="language-plaintext highlighter-rouge">git branch --set-upstream-to=origin/main main</code>. ‘’’ Then sync both branches, main and pegasus.</p> <p>It’s best to create the repo empty on the github side, otherwise there is some need to merge e.g. gitignore files.</p> <h3 id="python-env-using-poetry">python env using poetry</h3> <p><code class="language-plaintext highlighter-rouge">poetry</code> is not officially supported but can be used via the <code class="language-plaintext highlighter-rouge">requirement.ini</code> files.</p> <p>First initialize poetry by running <code class="language-plaintext highlighter-rouge">poetry init</code>, make sure to select the proper python version and dont specifiy any dependencies during initialization. The new poetry configuration will be appended to the existing <code class="language-plaintext highlighter-rouge">pyproject.toml</code>.</p> <p>The python versions for pegasus versions are:</p> <ul> <li>pegasus-2023.11.1 (since 2023.4): python-3.11</li> </ul> <p>To create the virtual env <em>inside</em> the project directory in <code class="language-plaintext highlighter-rouge">.venv</code>, check that the option <code class="language-plaintext highlighter-rouge">virtualenvs.in-project</code> is set to <code class="language-plaintext highlighter-rouge">true</code>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry config <span class="nt">--list</span>  <span class="c"># check config settings</span>
poetry virtualenvs.in-project <span class="nb">true</span>  <span class="c"># set explicitly</span>
</code></pre></div></div> <p>Then add the required packages via poetry as described below.</p> <p><code class="language-plaintext highlighter-rouge">requirement.txt</code> contains fixed versions of <em>all</em> packages of the resolved dependency tree, similar to what is recorded in <code class="language-plaintext highlighter-rouge">poetry.lock</code>.</p> <p>We could run <code class="language-plaintext highlighter-rouge">poetry add</code> with the fully-resolved list of packages and their version constraints in the <code class="language-plaintext highlighter-rouge">requirements/*requirements.txt</code> files, but it’s more generic to add the actual requirements from the <code class="language-plaintext highlighter-rouge">requirements/*requirements.in</code> files.</p> <p>So if we want to use the minimal, generic dependencies, we just run <code class="language-plaintext highlighter-rouge">poetry add</code> for each line of the <code class="language-plaintext highlighter-rouge">.in</code> files. Note that this will not result in the exact same package versions as in the <code class="language-plaintext highlighter-rouge">requirements.txt</code> files, since poetry will run the resolver and pull the latest available packages fitting the constraints. This may or may not work with the code base (but often will).</p> <p>To run <code class="language-plaintext highlighter-rouge">poetry add</code> on each line use the following commands. <code class="language-plaintext highlighter-rouge">grep</code> excludes links to constraints and <code class="language-plaintext highlighter-rouge">sed</code> drops comments.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>requirements/dev-requirements.in | <span class="nb">grep</span> <span class="nt">-v</span> <span class="s1">'\-c '</span>| <span class="nb">sed</span> <span class="s1">'s/\s#.*//'</span> | xargs poetry add <span class="nt">--group</span> dev
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>requirements/requirements.in | <span class="nb">grep</span> <span class="nt">-v</span> <span class="s1">'\-c '</span> | <span class="nb">sed</span> <span class="s1">'s/\s#.*//'</span> | xargs poetry add
</code></pre></div></div> <p>Lastly, to select the correct virtual environment in visual studio code, select <code class="language-plaintext highlighter-rouge">Python: Select Interpreter</code> from the command palette (Shift-Ctrl-P) and pick <code class="language-plaintext highlighter-rouge">./.venv</code> from the list.</p> <h3 id="setting-up-a-webpack-workflow">Setting up a <code class="language-plaintext highlighter-rouge">webpack</code> workflow</h3> <p>The reasoning and tradeoffs on how to integrate js (and frontend libraries) are covered in the guide about <a href="https://www.saaspegasus.com/guides/">Modern JavaScript for Django Developers</a>.</p> <p>Remember, to take this approach, do <strong>not</strong> select the option <code class="language-plaintext highlighter-rouge">Include static files</code> in the project configuration.</p> <p>The details of the setup for SaaS Pegasus are covered in two parts of the documentation:</p> <ol> <li>For javascript in the section <a href="https://docs.saaspegasus.com/front-end/">The Front End</a></li> <li>For css in the section <a href="https://docs.saaspegasus.com/css/">CSS</a></li> </ol> <p>If the <code class="language-plaintext highlighter-rouge">Include static files</code> option was not in the project configuration, the project package comes complete with a <code class="language-plaintext highlighter-rouge">webpack-config.js</code> file configured for the chosen css frontend (e.g. bootstrap).</p> <p>The next step is to set up a javascript environment for the project. That works similar to setting up a python environment.</p> <p>The <a href="https://docs.saaspegasus.com/front-end/#prerequisites-to-building-the-front-end">pegasus docs</a> mention <code class="language-plaintext highlighter-rouge">nvm</code>, the <code class="language-plaintext highlighter-rouge">npm</code> version manager (similar to <code class="language-plaintext highlighter-rouge">virtualenv</code>) but don’t go into details.</p> <p><code class="language-plaintext highlighter-rouge">nvm</code> installation is described in detail on <a href="https://github.com/nvm-sh/nvm">this github webseite</a> - the gist is to install <code class="language-plaintext highlighter-rouge">nvm</code> on the user level and switch <code class="language-plaintext highlighter-rouge">npm</code> versions on the go, depending on the directory one works in. To this end, the <code class="language-plaintext highlighter-rouge">nvm</code> installer script appends some lines to the <code class="language-plaintext highlighter-rouge">.bashrc</code> file.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/
curl <span class="nt">-o-</span> https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
<span class="nb">source</span> .bashrc
</code></pre></div></div> <p>After installation of <code class="language-plaintext highlighter-rouge">nvm</code> any instructions recommending running <code class="language-plaintext highlighter-rouge">npm</code> as root should instead be run as user.</p> <p>How to use <code class="language-plaintext highlighter-rouge">nvm</code> is covered in the <a href="https://github.com/nvm-sh/nvm#usage">Usage section of the official docs</a>, but basically you can then install the latest version of node:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvm <span class="nb">install </span>node
which nvm  <span class="c"># will point to ~/.nvm/versions/...</span>
</code></pre></div></div> <p>Once this is done, change into the project directory and run</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span>
</code></pre></div></div> <p>This will read the included <code class="language-plaintext highlighter-rouge">package.json</code> file and install the javascript packages configured there.</p> <p>Then you can proceed to build the javascript (and css) bundles using webpack via the preconfigure command <code class="language-plaintext highlighter-rouge">npm run dev</code> or <code class="language-plaintext highlighter-rouge">npm run dev-watch</code>. To build for production, run <code class="language-plaintext highlighter-rouge">npm run build</code>.</p> <p>To configure the webpack build system look at the section <a href="https://docs.saaspegasus.com/front-end/#long-term-best-practices">Long-term best practicse</a> of the pegasus front-end docs. This includes instructions on how the set up own javascript code, compile per-page etc.</p> <p>In particular, the <code class="language-plaintext highlighter-rouge">webpack.config.js</code> file contains definitions for various <code class="language-plaintext highlighter-rouge">entry</code> (= source files) and <code class="language-plaintext highlighter-rouge">output</code> (= destination files). For example to add a special script <code class="language-plaintext highlighter-rouge">special.js</code> add the script to the <code class="language-plaintext highlighter-rouge">entry</code> part like this:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">entry</span><span class="p">:</span> <span class="p">{</span>
    <span class="c1">// more entries</span>
    <span class="dl">'</span><span class="s1">special</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./assets/javascript/special.js</span><span class="dl">'</span><span class="p">,</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">assets/javascript/special.js</code> will then be compiled into <code class="language-plaintext highlighter-rouge">static/js/special-bundle.js</code></p> <p>The convention for the location of <code class="language-plaintext highlighter-rouge">entry</code> and <code class="language-plaintext highlighter-rouge">output</code> directories is to have the former in the <code class="language-plaintext highlighter-rouge">assets/javascript/</code> folder and the latter in the <code class="language-plaintext highlighter-rouge">static</code> folder.</p> <p>The output js files need to be loaded on the respective html pages:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
{% load static %}
{% block page_js %}
  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"{% static 'js/app-bundle.js' %}"</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"{% static 'js/special-bundle.js' %}"</span><span class="nt">&gt;&lt;/script&gt;</span>
{% endblock page_js %}

</code></pre></div></div> <h3 id="passing-data-from-django-to-javascript">Passing data from django to javascript</h3> <p>This can be done either directly via django templates or via api calls. The first option is great for small amounts of data that is directly available in a django model, the second option is better for larger data sets (e.g. graphs) that can be fetched asynchronously from an api.</p> <p>Her is <a href="https://www.saaspegasus.com/guides/modern-javascript-for-django-developers/integrating-django-react/#passing-data-directly-with-djangos-template-system">documentation on how to pass data to javascript via django templates</a>. Basically you build a dict in django and render it in the template using the <code class="language-plaintext highlighter-rouge">json_script</code> template tag.</p> <p>The simplest way to pass single variable <code class="language-plaintext highlighter-rouge">mystringvar</code> is, to just render it directly in the template like this:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;script </span><span class="na">id=</span><span class="s">"mystringvar"</span> <span class="na">type=</span><span class="s">"application/json"</span><span class="nt">&gt;</span><span class="dl">"</span><span class="s2">{{ simulation.mystringvar }}</span><span class="dl">"</span><span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"{% static 'rheo_three-bundle.js' %}"</span>

</code></pre></div></div> <p>The variable can then be retrieved in the javascript by</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">mystringvar</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">mystringvar</span><span class="dl">'</span><span class="p">).</span><span class="nx">textContent</span><span class="p">;</span>
<span class="c1">// for more complex json dicts:</span>
<span class="c1">//const mystringvar = JSON.parse(document.getElementById('mystringvar').textContent)</span>
</code></pre></div></div> <p>To include all this via webpack in an external script file and log <code class="language-plaintext highlighter-rouge">mystringvar</code> to the console as well as display it on the page as content of a div with the <code class="language-plaintext highlighter-rouge">id="mystringvar-div"</code> you can do the following:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// assets/javascript/special.js</span>
<span class="kd">function</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// this is populated from django and rendered into the django template - we retrieve it here in js</span>
    <span class="kd">const</span> <span class="nx">mystringvar</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">mystringvar</span><span class="dl">'</span><span class="p">).</span><span class="nx">textContent</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">mystringvar</span><span class="p">);</span>
<span class="p">}</span>
<span class="nf">foo</span><span class="p">();</span>  <span class="c1">// will print mystringvar to the javascript console</span>

<span class="c1">// will show mystringvar as inner text content of &lt;div id="mystringvar-div"&gt;&lt;/div&gt;</span>
<span class="kd">const</span> <span class="nx">mystringvar</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">mystringvar</span><span class="dl">'</span><span class="p">).</span><span class="nx">textContent</span><span class="p">;</span>
<span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">mystringvar-div</span><span class="dl">'</span><span class="p">).</span><span class="nx">innerText</span> <span class="o">=</span> <span class="nx">mystringvar</span>
</code></pre></div></div> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"mystringvar-div"</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;script </span><span class="na">id=</span><span class="s">"mystringvar"</span> <span class="na">type=</span><span class="s">"application/json"</span><span class="nt">&gt;</span><span class="dl">"</span><span class="s2">{{ simulation.mystringvar }}</span><span class="dl">"</span><span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"{% static 'rheo_three-bundle.js' %}"</span>

</code></pre></div></div> <h3 id="customizing-the-theme">Customizing the theme</h3> <p>I’m exclusively using bootstrap 5 here since it is the most prevalent framework out there.</p> <p>Pegasus uses sass via <code class="language-plaintext highlighter-rouge">webpack</code> (see previous chapter) and additionally splits the sass files into two parts:</p> <ul> <li>css-framework independent styles: <code class="language-plaintext highlighter-rouge">/assets/styles/app/base.sass</code> –&gt; <code class="language-plaintext highlighter-rouge">static/site-base.css</code></li> <li>css-framework overrides: <code class="language-plaintext highlighter-rouge">/assets/styles/app/bootstrap/</code> –&gt; <code class="language-plaintext highlighter-rouge">static/site-bootstrap.css</code></li> </ul> <p>To override bootstrap styles, edit <code class="language-plaintext highlighter-rouge">assets/styles/site-bootstrap.scss</code> according to the bootstrap docs. Edits will only apply if you run <code class="language-plaintext highlighter-rouge">npm run dev</code> (<code class="language-plaintext highlighter-rouge">dev-watch</code>).</p> <p>If you change any bootstrap scss variables, you need to do so before the boostrap css files are included or they will have no effect. Bootstrap class overrides go into the file after bootsrap code is included.</p> <h3 id="user-setup">User setup</h3> <p>Start a first user by starting the server <code class="language-plaintext highlighter-rouge">django runserver</code> (see below how to set up the <code class="language-plaintext highlighter-rouge">django</code>-shortcut) and going through the registration process. Then elevate the user to superuser with the script supplied by pegasus: <code class="language-plaintext highlighter-rouge">django promote_user_to_superuser yourname@example.com</code>. After that, you can log in and access <code class="language-plaintext highlighter-rouge">http://localhost:8000/admin</code>.</p> <h2 id="add-a-custom-app">Add a custom app</h2> <p>Pegasus organizes all apps in the <code class="language-plaintext highlighter-rouge">apps</code> directory. To add an app there specify a path when calling startapp:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>apps/projects
django startapp projects apps/projects
</code></pre></div></div> <p>The broad next steps are then:</p> <ul> <li>Add a model</li> <li>Create a view for the model</li> <li>Create a <code class="language-plaintext highlighter-rouge">urls.py</code> file and add the url scheme</li> <li>Include the new <code class="language-plaintext highlighter-rouge">apps/projects/urls.py</code> in the <em>project</em> <code class="language-plaintext highlighter-rouge">urls.py</code></li> <li>Add a template in <code class="language-plaintext highlighter-rouge">templates/web/...</code></li> <li>Create an object via the admin interface</li> <li>Start migrations and test</li> </ul> <p>Lets go over the code in detail quickly. This uses generic class based views.</p> <h3 id="create-a-model">Create a model</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># apps/project/models.py
</span><span class="kn">from</span> <span class="n">django.db</span> <span class="kn">import</span> <span class="n">models</span>

<span class="c1"># Create your models here.
</span>
<span class="c1"># basic project model
</span><span class="k">class</span> <span class="nc">Project</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">CharField</span><span class="p">(</span>
        <span class="n">max_length</span><span class="o">=</span><span class="mi">128</span><span class="p">,</span>
        <span class="n">help_text</span><span class="o">=</span><span class="sh">"</span><span class="s">Descriptive project name.</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>
    <span class="n">created</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">DateTimeField</span><span class="p">(</span><span class="n">auto_now_add</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> (created: </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">created</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span>
</code></pre></div></div> <h3 id="create-a-view-for-the-model">Create a view for the model</h3> <p>We just implement the DetailView here:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># apps/project/views.py
</span><span class="kn">from</span> <span class="n">django.views.generic</span> <span class="kn">import</span> <span class="n">DetailView</span>
<span class="kn">from</span> <span class="n">.models</span> <span class="kn">import</span> <span class="n">Project</span>

<span class="c1"># Create your views here.
</span>
<span class="k">class</span> <span class="nc">ProjectDetailView</span><span class="p">(</span><span class="n">DetailView</span><span class="p">):</span>
    <span class="n">model</span> <span class="o">=</span> <span class="n">Project</span>
    <span class="n">template_name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">web/project.html</span><span class="sh">"</span>
</code></pre></div></div> <h3 id="create-and-link-urls">Create and link urls</h3> <p>Create <code class="language-plaintext highlighter-rouge">urls.py</code>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># apps/project/urls.py
</span><span class="kn">from</span> <span class="n">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="n">.views</span> <span class="kn">import</span> <span class="n">ProjectDetailView</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nf">path</span><span class="p">(</span><span class="sh">"</span><span class="s">project/&lt;int:pk&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">ProjectDetailView</span><span class="p">.</span><span class="nf">as_view</span><span class="p">(),</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">project</span><span class="sh">"</span><span class="p">),</span>
<span class="p">]</span>
</code></pre></div></div> <p>Now include this new <code class="language-plaintext highlighter-rouge">urls.py</code> in the <em>project</em> file in <code class="language-plaintext highlighter-rouge">project_name/project_name/urls.py</code> at the end of the <code class="language-plaintext highlighter-rouge">urlpatterns</code>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="c1"># redirect Django admin login to main login page
</span>    <span class="c1"># ... path includes ..
</span>    <span class="c1"># myproject projects
</span>    <span class="nf">path</span><span class="p">(</span><span class="sh">""</span><span class="p">,</span> <span class="nf">include</span><span class="p">(</span><span class="sh">"</span><span class="s">apps.projects.urls</span><span class="sh">"</span><span class="p">))</span>
<span class="p">]</span> <span class="o">+</span> <span class="nf">static</span><span class="p">(</span><span class="n">settings</span><span class="p">.</span><span class="n">MEDIA_URL</span><span class="p">,</span> <span class="n">document_root</span><span class="o">=</span><span class="n">settings</span><span class="p">.</span><span class="n">MEDIA_ROOT</span><span class="p">)</span>
</code></pre></div></div> <h3 id="add-a-template">Add a template</h3> <p>Pegasus keeps templates in a global <code class="language-plaintext highlighter-rouge">template</code> directory. It’s possible to either create a subdirectory there for the app, or if there are no namespace clashes, I can add the template directly in the existing structure. In this case I will just use a single Detail view, so I put the template in <code class="language-plaintext highlighter-rouge">templates/web/project.html</code>. To make things easier to maintain I break this down into sections:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c">&lt;!-- templates/web/project.html --&gt;</span>
{% extends "web/base.html" %}
{% load static %}
{% block body %}
  {% include 'web/components/projects_detail.html' %}
{% endblock %}

</code></pre></div></div> <p>Then in <code class="language-plaintext highlighter-rouge">projects_detail.html</code> I can show the details:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c">&lt;!-- templates/web/components/projects_detail.html --&gt;</span>
{% load i18n %}
{% load static %}
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container text-center"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row justify-content-center"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col col-md-8 align-self-center"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row align-items-center justify-content-center py-4 border-dark border-top border-bottom border-opacity-25"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col"</span><span class="nt">&gt;</span>
          Project: <span class="nt">&lt;h1&gt;</span>{{ project.name }}<span class="nt">&lt;/h1&gt;</span>
          <span class="nt">&lt;p&gt;</span>Project creation time: {{ project.created}} <span class="nt">&lt;/p&gt;</span>
          <span class="nt">&lt;p&gt;</span>Project primary key: {{ project.pk }} <span class="nt">&lt;/p&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>

</code></pre></div></div> <h3 id="migrations-and-test">Migrations and test</h3> <p>Run <code class="language-plaintext highlighter-rouge">django makemigrations &amp;&amp; django migrate</code>, start the server <code class="language-plaintext highlighter-rouge">django runserver</code>. Then add a object instance from <code class="language-plaintext highlighter-rouge">127.0.0.1:8000/admin</code> and check the view according to the url-scheme under <code class="language-plaintext highlighter-rouge">127.0.0.1:8000/projects/1</code>.</p> <h2 id="misc-hints">Misc. hints</h2> <h3 id="django-shortcut-command">‘django’ shortcut command</h3> <p>Instead of running <code class="language-plaintext highlighter-rouge">python manage.py ...</code> all the time we can abbreviate this to a <code class="language-plaintext highlighter-rouge">django</code> command by appending the following to our <code class="language-plaintext highlighter-rouge">.bashrc</code>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># wrapper command for django's "python manage.py"</span>
django<span class="o">(){</span>
        python manage.py <span class="s2">"</span><span class="nv">$@</span><span class="s2">"</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="django"/><category term="python"/><summary type="html"><![CDATA[Notes for quickly setting up a django pegasus project]]></summary></entry><entry><title type="html">Creative commons font icons</title><link href="https://drivel.karuken.quest/blog/2023/creative-commons-font-icons/" rel="alternate" type="text/html" title="Creative commons font icons"/><published>2023-12-08T00:00:00+00:00</published><updated>2023-12-08T00:00:00+00:00</updated><id>https://drivel.karuken.quest/blog/2023/creative-commons-font-icons</id><content type="html" xml:base="https://drivel.karuken.quest/blog/2023/creative-commons-font-icons/"><![CDATA[<p>A lot of websites use the <a href="https://creativecommons.org/">Creative Commons</a> license(es) to share their creative work. I wanted to do so on this blog, but was confronted with two options I didn’t like. I could either show the license as image or as a simple text, like for example <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0</a> or include an <a href="https://creativecommons.org/mission/downloads/">image from the creative commons website</a>.</p> <p>It’s also possible to include the icons as svg files for example from fontawesome or similar icon libraries.</p> <p>However, I went with another option, by including the minimal webfont from <a href="https://www.ctrl.blog/entry/creative-commons-unicode-fallback-font.html">Daniel Aleksandersen’s blog</a>.</p> <p>I include the font definition in the css definitions for the blog, restricted to the footer, where I want to use them:</p> <figure class="highlight"><pre><code class="language-css" data-lang="css"><span class="k">@font-face</span> <span class="p">{</span>
  <span class="py">font-display</span><span class="p">:</span> <span class="n">swap</span><span class="p">;</span>
  <span class="nl">font-family</span><span class="p">:</span> <span class="n">CCSymbols</span><span class="p">;</span>
  <span class="nl">font-synthesis</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="nl">src</span><span class="p">:</span> <span class="sx">url(CCSymbols.woff2)</span> <span class="n">format</span><span class="p">(</span><span class="n">woff2</span><span class="p">),</span>
       <span class="sx">url(CCSymbols.woff)</span>  <span class="n">format</span><span class="p">(</span><span class="n">woff</span><span class="p">);</span>
  <span class="py">unicode-range</span><span class="p">:</span> <span class="n">u</span><span class="err">+</span><span class="n">a9</span><span class="p">,</span> <span class="n">u</span><span class="err">+</span><span class="m">229</span><span class="n">c</span><span class="p">,</span>
                 <span class="n">u</span><span class="err">+</span><span class="m">1</span><span class="n">f10d-1f10f</span><span class="p">,</span>
                 <span class="n">u</span><span class="err">+</span><span class="m">1</span><span class="n">f16d-1f16f</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">footer</span> <span class="p">{</span><span class="nl">font-family</span><span class="p">:</span> <span class="nb">sans-serif</span><span class="p">,</span> <span class="n">CCSymbols</span><span class="p">;}</span></code></pre></figure> <p>The tiny font files, that I downloaded from the blog linked above, need to be dropped into <code class="language-plaintext highlighter-rouge">assets/css/</code> for jekyll.</p> <p>In the html-footer then, I can use the html notation for the symbols (e.g. from <a href="https://en.wikipedia.org/wiki/Creative_Commons_license">https://en.wikipedia.org/wiki/Creative_Commons_license</a>) and the browser will render the symbols in the first webfont it encounters, that support the symbols. In our case this is the <code class="language-plaintext highlighter-rouge">CCSymbols</code> font. Here is how this looks when modifying the footer of a jekyll page with the al-folio theme.</p> <figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;footer&gt;</span>
    ...
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-12 col-md-3 container"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"container"</span> <span class="na">style=</span><span class="s">"font-size:20px; vertical-align: middle;"</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">"https://creativecommons.org/licenses/by-nc-sa/4.0/"</span><span class="nt">&gt;</span><span class="ni">&amp;#127341;&amp;#127343;&amp;#127247;&amp;#127246;</span><span class="nt">&lt;/a&gt;&lt;/span&gt;</span>
        2023 cargocultprg
    <span class="nt">&lt;/div&gt;</span>
    ...
<span class="nt">&lt;/footer&gt;</span></code></pre></figure> <p>That allows me to show the symbols as <em>normal</em> text that I can use in a simple link. The css-attribute <code class="language-plaintext highlighter-rouge">vertical-align: middle</code> ensures that all symbols appear alligned with the other text content.</p> <p>For the final result take a look at the lower-left of the footer of this website.</p>]]></content><author><name></name></author><category term="jekyll"/><category term="css"/><summary type="html"><![CDATA[Include creative commons symbols as unicode icons in your website]]></summary></entry><entry><title type="html">Custom shell login message</title><link href="https://drivel.karuken.quest/blog/2023/custom-login-message/" rel="alternate" type="text/html" title="Custom shell login message"/><published>2023-12-03T00:00:00+00:00</published><updated>2023-12-03T00:00:00+00:00</updated><id>https://drivel.karuken.quest/blog/2023/custom-login-message</id><content type="html" xml:base="https://drivel.karuken.quest/blog/2023/custom-login-message/"><![CDATA[<p>If you log into different servers with ssh frequently it may make sense to display a custom welcome message for the server.</p> <p>This is extremely easy to set up and helps to stay aware of your (shell) surroundings, so to speak.</p> <p>To implement this, I like to display the ascii art of the server nickname as welcome message. I’m usually using the same nickname that I also use in my ssh configuration - for the sake of this example, we’ll assume the name is <code class="language-plaintext highlighter-rouge">blackbox</code>.</p> <p>First head over to <a href="https://patorjk.com/software/taag">https://patorjk.com/software/taag</a> or <a href="https://www.asciiart.eu/text-to-ascii-art">https://www.asciiart.eu/text-to-ascii-art</a>, enter the nickname, pick a style you like and copy the result. It might look something like this:</p> <pre><code class="language-ascii"> _     _            _    _               
| |   | |          | |  | |              
| |__ | | __ _  ___| | _| |__   _____  __
| '_ \| |/ _` |/ __| |/ / '_ \ / _ \ \/ /
| |_) | | (_| | (__|   &lt;| |_) | (_) &gt;  &lt; 
|_.__/|_|\__,_|\___|_|\_\_.__/ \___/_/\_\

</code></pre> <p>Now all you need to do is to stick this into <code class="language-plaintext highlighter-rouge">/etc/motd</code> (create it, if it doesnt exist) and you are good to go. The ascii label will be included at the end of the usual login message so your login will look something like this:</p> <pre><code class="language-ascii">$ ssh blackbox

Welcome to Ubuntu 22.04.3 LTS (GNU/Linux 5.15.0-89-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Sun Dec  3 05:42:01 PM UTC 2023

  System load:  0.0               Processes:               129
  Usage of /:   3.0% of 74.79GB   Users logged in:         1
  Memory usage: 3%                IPv4 address for enp7s0: 10.0.0.2
  Swap usage:   0%                IPv4 address for eth0:   86.35.12.232

 * Strictly confined Kubernetes makes edge and IoT secure. Learn how MicroK8s
   just raised the bar for easy, resilient and secure K8s cluster deployment.

   https://ubuntu.com/engage/secure-kubernetes-at-the-edge

Expanded Security Maintenance for Applications is not enabled.

1 update can be applied immediately.
To see these additional updates run: apt list --upgradable

Enable ESM Apps to receive additional future security updates.
See https://ubuntu.com/esm or run: sudo pro status

 _     _            _    _               
| |   | |          | |  | |              
| |__ | | __ _  ___| | _| |__   _____  __
| '_ \| |/ _` |/ __| |/ / '_ \ / _ \ \/ /
| |_) | | (_| | (__|   &lt;| |_) | (_) &gt;  &lt; 
|_.__/|_|\__,_|\___|_|\_\_.__/ \___/_/\_\

Last login: Sun Dec  3 17:04:45 2023 from 106.23.107.216

cargocultprg@blackbox:~#
</code></pre> <p>For a more fine-grained configuration, take a look at the files <code class="language-plaintext highlighter-rouge">/etc/issue</code> and <code class="language-plaintext highlighter-rouge">/etc/issue.net</code> as well as the <code class="language-plaintext highlighter-rouge">banner</code> setting in <code class="language-plaintext highlighter-rouge">/etc/ssh/sshd_config</code>.</p> <p><code class="language-plaintext highlighter-rouge">motd</code> is displayed after login at the end of all other login messages, <code class="language-plaintext highlighter-rouge">issue</code> is displayed before login for local users and <code class="language-plaintext highlighter-rouge">issue.net</code> is the equivalent for users that connect via network.</p>]]></content><author><name></name></author><category term="linux"/><category term="cli"/><summary type="html"><![CDATA[Display a custom shell login message for ssh]]></summary></entry><entry><title type="html">Configure a VPS for web apps</title><link href="https://drivel.karuken.quest/blog/2023/webapp-setup-on-vps/" rel="alternate" type="text/html" title="Configure a VPS for web apps"/><published>2023-12-03T00:00:00+00:00</published><updated>2023-12-03T00:00:00+00:00</updated><id>https://drivel.karuken.quest/blog/2023/webapp-setup-on-vps</id><content type="html" xml:base="https://drivel.karuken.quest/blog/2023/webapp-setup-on-vps/"><![CDATA[<p>A VPS (<em>V</em>irtual <em>P</em>rivate <em>S</em>erver) is a cheap way to run web apps for hobby projects. Basically you are renting a small virtual server, that will not have any form of guaranteed performance (since it shares hardware with other VPS instances), but is otherwise a full-fledged (linux) server with the full power of the platform.</p> <p>There are platform-as-a-service offers out there like heroku or fly.io and similar. These have the advantage that they handle much of the setup from databases to backups, but have the disadvantage that you are (a) tied to the platform with respect to costs and (b) need to learn platform-specific setup scripts.</p> <p>Imho it’s better to keep such dependencies at a minimum. While they promise to save time and costs, more often than not, they do neither, when free plans are suddenly discontinued and the setup interface changes often.</p> <p>It’s better to take a day or two to learn to set up things yourself. There’s some initial learning cost, but for hobby projects you will be able to run a number of different projects on the same server that’ll cost you just a couple of EUR per month.</p> <p>In case one of your projects booms and requires a more serious setup to scale, you will be better informed about the options and can then migrate to a dedicated server.</p> <p>A web app in the sense we are using it here can be for example a django or fastapi programm, a website with javascript and anything in between.</p> <p>I’m not going into details of the setup here, but just go over a minimal configuration that allows you to run an app on the server. For a production server with serious traffic and business value you will need more configuration from ssl certificates and domain names over security and backup to various databases and maybe queuing systems, automated deploy and much more. For the sake of clarity I’ll omit all this and concentrate only on essential steps:</p> <ol> <li><a href="#server-provide-and-image">Server provider and image</a>: Where to set up your VPS and which image to use</li> <li><a href="#server-update-and-installation">Installation of software</a>: Update the server and install basic software</li> <li><a href="#web-app-runtime-environment">Web app environment</a>: Create a runtime environment for the web app</li> <li><a href="#upload-the-web-app">Upload web app</a>: Get the code into place with the right permissions</li> <li><a href="#install-the-webapp-poetry-venv">Install the venv</a>: Install the direct runtime depencies (via poetry in this example)</li> <li><a href="#running-the-web-app">Running the app</a>: Running the webapp</li> <li><a href="#monitor-and-auto-restart">Monitor and (re)start</a>: Automate the (re)start of the runscript</li> <li><a href="#optional-nginx">Optional webserver</a>: Set up nginx for additional flexibility</li> </ol> <h2 id="server-provide-and-image">Server provide and image</h2> <p>I’m assuming you have a VPS up and running and that you have root access to it. Ideally take some time to set up ssh keys for easy, passwordless login. For the examples here, I assume that you are running ubuntu (server, i.e. without graphical user interface).</p> <p>Your VPS provider (e.g. <a href="https://www.netcup.de/">https://www.netcup.de/</a>, <a href="https://www.hetzner.com/">https://www.hetzner.com/</a>, <a href="https://www.digitalocean.com/">https://www.digitalocean.com/</a> to name a few) will typicall provide a starter image to get you going. Unless you have a compelling reason to pick something exotic stay with a popular image, simply since maintenance and (community) support will be better.</p> <h2 id="server-update-and-installation">Server update and installation</h2> <p>For our project we assume a <a href="https://fastapi.tiangolo.com/">fastapi</a> app, that is configured with <a href="https://python-poetry.org/">python-poetry</a> as environment manager.</p> <p>Upgrade the server and install the packages we need:</p> <figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="nv">$ </span><span class="nb">sudo </span>apt update <span class="o">&amp;&amp;</span> apt upgrade <span class="o">&amp;&amp;</span> apt autoremove
<span class="o">[</span>... output ...]
<span class="nv">$ </span><span class="nb">sudo </span>apt <span class="nb">install </span>supervisor python-is-python3
<span class="o">[</span>... output ...]
<span class="nv">$ </span>python <span class="nt">--version</span>
Python 3.10.12
<span class="nv">$ </span><span class="nb">sudo </span>curl <span class="nt">-sSL</span> https://install.python-poetry.org | python3 -
</pre></td></tr></tbody></table></code></pre></figure> <p>The requirements on top of the server image are minimal. Depending on the type of web app that you run, the software requirements might be a bit different - for example you might require nginx, celery, postgresql etc. but my app just needs python and python-poetry.</p> <p>The installation of <code class="language-plaintext highlighter-rouge">supervisor</code> is a convenience setup that isn’t strictly necessary, but helpful in controlling the web app.</p> <h2 id="web-app-runtime-environment">Web app runtime environment</h2> <p>In good old unix tradition I’ll run my web app as a dedicated user with limited system access. Since my server only has the job to run web apps and don’t has any regular users, I’ll also serve content from <code class="language-plaintext highlighter-rouge">/home/mywebapp/</code>. In a different setting I might choose something like <code class="language-plaintext highlighter-rouge">/var/mywebapp</code> or even <code class="language-plaintext highlighter-rouge">/var/webapps/mywebapp</code>.</p> <figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre><span class="nv">$ </span><span class="nb">sudo </span>groupadd <span class="nt">--system</span> webapp
<span class="nv">$ </span><span class="nb">sudo </span>useradd <span class="nt">--system</span> <span class="nt">--gid</span> webapps <span class="nt">--shell</span> /bin/bash <span class="nt">--home</span> /home/mywebapp mywebapp
<span class="nv">$ </span><span class="nb">sudo mkdir</span> /home/mywebapp
<span class="nv">$ </span><span class="nb">sudo chown </span>mywebapp:webapps /home/mywebapp
</pre></td></tr></tbody></table></code></pre></figure> <figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre><span class="nv">$ </span><span class="nb">sudo </span>su - mywebapp
mywebapp<span class="nv">$ </span>curl <span class="nt">-sSL</span> https://install.python-poetry.org | python3 -

Retrieving Poetry metadata

<span class="c"># Welcome to Poetry!</span>

This will download and <span class="nb">install </span>the latest version of Poetry,
a dependency and package manager <span class="k">for </span>Python.

It will add the <span class="sb">`</span>poetry<span class="sb">`</span> <span class="nb">command </span>to Poetry<span class="s1">'s bin directory, located at:

/home/mywebapp/.local/bin

You can uninstall at any time by executing this script with the --uninstall option,
and these changes will be reverted.

Installing Poetry (1.7.1): Done

Poetry (1.7.1) is installed now. Great!

To get started you need Poetry'</span>s bin directory <span class="o">(</span>/home/mywebapp/.local/bin<span class="o">)</span> <span class="k">in </span>your <span class="sb">`</span>PATH<span class="sb">`</span>
environment variable.

Add <span class="sb">`</span><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"/home/mywebapp/.local/bin:</span><span class="nv">$PATH</span><span class="s2">"</span><span class="sb">`</span> to your shell configuration file.

Alternatively, you can call Poetry explicitly with <span class="sb">`</span>/home/mywebapp/.local/bin/poetry<span class="sb">`</span><span class="nb">.</span>

You can <span class="nb">test </span>that everything is <span class="nb">set </span>up by executing:

<span class="sb">`</span>poetry <span class="nt">--version</span><span class="sb">`</span>

mywebapp<span class="nv">$ </span>vim .bashrc  <span class="c"># add the "export PATH" line from above</span>
mywebapp<span class="nv">$ </span><span class="nb">source</span> .bashrc
mywebapp<span class="nv">$ </span>poetry <span class="nt">--version</span>
Poetry <span class="o">(</span>version 1.7.1<span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></figure> <h2 id="upload-the-web-app">Upload the web app</h2> <p>At this point I have a webapp on my development computer, that I tested there locally. It doesn’t really matter how you get the app onto your server, just make sure you upload it to the <code class="language-plaintext highlighter-rouge">/home/mywebapp</code> directory and set proper permissions.</p> <p>In a more permanent setting I’d do this by either pulling the web app in via git manually or periodically or to set up a webhook that will be notified if a git-repo is updaten and will then take care of the deployment work (likely something like <code class="language-plaintext highlighter-rouge">git pull</code>, run tests, activate).</p> <p>Here we keep it simply and just transfer our app with rsync. We are running the remote part of rsync by specifying <code class="language-plaintext highlighter-rouge">--rsync-path</code> so that we can use our login user for the ssh login, but change to our webapp user for saving the files (we run the remote rsync process as user <code class="language-plaintext highlighter-rouge">mywebapp</code>)(see <a href="https://unix.stackexchange.com/questions/240814/rsync-with-different-user">this stackexchange thread for details</a>). From the development box:</p> <figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nv">$ </span>rsync <span class="nt">--rsync-path</span> <span class="s1">'sudo -u mywebapp rsync'</span> <span class="nt">-avP</span> /home/cargocultprg/projects/mywebapp/ aera-incognita:/home/mywebapp/
</pre></td></tr></tbody></table></code></pre></figure> <p>You can test the command using the option <code class="language-plaintext highlighter-rouge">--dry-run</code> first, to make sure it lands right. By the end of this you should have the source code of your web app on the server in the directory <code class="language-plaintext highlighter-rouge">/home/mywebapp</code> with all files set to be owned by user <code class="language-plaintext highlighter-rouge">mywebapp</code>.</p> <h2 id="install-the-webapp-poetry-venv">Install the webapp (poetry) venv</h2> <p>As mentioned, I’m using python-poetry to manage the virtual environment for my webapp. Since I already installed poetry, I can now simply run <code class="language-plaintext highlighter-rouge">poetry install</code> to set up the virtual environment on the server.</p> <p>First we want to make sure that the venv is created in our project root directory by setting the respective poetry setting true: <code class="language-plaintext highlighter-rouge">poetry config virtualenvs.in-project true</code>. To double check:</p> <figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="nv">$ </span>poetry config <span class="nt">--list</span>
cache-dir <span class="o">=</span> <span class="s2">"/home/mywebapp/.cache/pypoetry"</span>
experimental.system-git-client <span class="o">=</span> <span class="nb">false
</span>installer.max-workers <span class="o">=</span> null
installer.modern-installation <span class="o">=</span> <span class="nb">true
</span>installer.no-binary <span class="o">=</span> null
installer.parallel <span class="o">=</span> <span class="nb">true
</span>virtualenvs.create <span class="o">=</span> <span class="nb">true
</span>virtualenvs.in-project <span class="o">=</span> <span class="nb">true
</span>virtualenvs.options.always-copy <span class="o">=</span> <span class="nb">false
</span>virtualenvs.options.no-pip <span class="o">=</span> <span class="nb">false
</span>virtualenvs.options.no-setuptools <span class="o">=</span> <span class="nb">false
</span>virtualenvs.options.system-site-packages <span class="o">=</span> <span class="nb">false
</span>virtualenvs.path <span class="o">=</span> <span class="s2">"{cache-dir}/virtualenvs"</span>  <span class="c"># /home/mywebapp/.cache/pypoetry/virtualenvs</span>
virtualenvs.prefer-active-python <span class="o">=</span> <span class="nb">false
</span>virtualenvs.prompt <span class="o">=</span> <span class="s2">"{project_name}-py{python_version}"</span>
warnings.export <span class="o">=</span> <span class="nb">true</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>The we can install the virtual environment, just like we used it in development:</p> <figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="nv">$ </span>poetry <span class="nb">install
</span>Creating virtualenv mywebapp <span class="k">in</span> /home/mywebapp/.venv
Installing dependencies from lock file

Package operations: 40 installs, 0 updates, 0 removals

  • Installing exceptiongroup <span class="o">(</span>1.2.0<span class="o">)</span>
  • Installing idna <span class="o">(</span>3.6<span class="o">)</span>
  • Installing sniffio <span class="o">(</span>1.3.0<span class="o">)</span>
  • Installing anyio <span class="o">(</span>4.1.0<span class="o">)</span>
  • Installing certifi <span class="o">(</span>2023.11.17<span class="o">)</span>
  ...
</pre></td></tr></tbody></table></code></pre></figure> <h2 id="running-the-web-app">Running the web app</h2> <p>With the virtual environment installed, I can activate it and run the web app. In my case it’s a python fastAPI app that runs with uvicorn.</p> <figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="nv">$ </span>poetry shell
<span class="o">(</span>mywebapp-py3.10<span class="o">)</span> mywebapp@blackbox:~/fastAPI<span class="nv">$ </span>uvicorn myapidir.myapi:app <span class="nt">--reload</span> 
INFO:     Will watch <span class="k">for </span>changes <span class="k">in </span>these directories: <span class="o">[</span><span class="s1">'/home/mywebapp/fastAPI'</span><span class="o">]</span>
INFO:     Uvicorn running on http://127.0.0.1:8000 <span class="o">(</span>Press CTRL+C to quit<span class="o">)</span>
INFO:     Started reloader process <span class="o">[</span>39036] using WatchFiles
INFO:     Started server process <span class="o">[</span>39038]
INFO:     Waiting <span class="k">for </span>application startup.
INFO:     Application startup complete.
<span class="o">[</span>Strg + C]
INFO:     Shutting down
INFO:     Waiting <span class="k">for </span>application shutdown.
INFO:     Application shutdown complete.
INFO:     Finished server process <span class="o">[</span>39038]
INFO:     Stopping reloader process <span class="o">[</span>39036]
</pre></td></tr></tbody></table></code></pre></figure> <p>To automate this, we’ll create a minimal shell script like this:</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="c">#!/bin/bash</span>
<span class="c"># /home/mywebapp/.local/bin/mywebapp_run</span>

<span class="nv">NAME</span><span class="o">=</span><span class="s2">"mywebapp"</span>
<span class="nv">APPDIR</span><span class="o">=</span>/home/webapp/fastAPI/
<span class="nv">USER</span><span class="o">=</span>mywebapp

<span class="nb">echo</span> <span class="s2">"starting </span><span class="nv">$NAME</span><span class="s2"> as </span><span class="sb">`</span><span class="nb">whoami</span><span class="sb">`</span><span class="s2">"</span>

<span class="c"># activate venv</span>
<span class="nb">cd</span> <span class="nv">$APPDIR</span>

<span class="c"># run webapp</span>
<span class="nb">exec</span> /home/mywebapp/.local/bin/poetry run uvicorn myapidir.myapi:app <span class="nt">--reload</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>Copy it to <code class="language-plaintext highlighter-rouge">.local/bin/mywebapp_run</code>, set it executable <code class="language-plaintext highlighter-rouge">chmod u+x ~/.local/bin/mywebapp_run</code> and double check it, buy running it as your mywebapp user.</p> <h2 id="monitor-and-auto-restart">Monitor and auto-restart</h2> <p>At this point I have a single executable that runs my app. Now I want to make sure that it is running on server restart. I set this up with <code class="language-plaintext highlighter-rouge">supervisor</code> which I installed at the start.</p> <p>The following script tells supervisor what to do:</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="c">#/etc/supervisor/conf.d/mywebapp.conf</span>
<span class="o">[</span>program:mywebapp]
<span class="nb">command</span> <span class="o">=</span> /home/mywebapp/.local/bin/mywebapp_run
user <span class="o">=</span> mywebapp
stdout_logfile <span class="o">=</span> /home/mywebapp/fastAPI/logs/supervisor.log
redirect_stderr <span class="o">=</span> <span class="nb">true</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>Here’s how to start supervisor:</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre><span class="nv">$ </span><span class="nb">sudo </span>systemctl <span class="nb">enable </span>supervisor
<span class="nv">$ </span><span class="nb">sudo </span>systemctl restart supervisor
<span class="nv">$ </span><span class="nb">sudo </span>supervisorctl status mywebapp
</pre></td></tr></tbody></table></code></pre></figure> <p>For every change of the script in <code class="language-plaintext highlighter-rouge">/etc/supervisor/conf.d/mywebapp.conf</code> supervisor must be restarted. Now supervisorctl can control the webapp:</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="nv">$ </span><span class="nb">sudo </span>supervisorctl stop mywebapp
mywebapp: stopped
<span class="nv">$ </span><span class="nb">sudo </span>supervisorctl start mywebapp
mywebapp: started
<span class="nv">$ </span>supervisorctl status mywebapp
mywebapp             RUNNING   pid 40368, <span class="nb">uptime </span>0:01:14
</pre></td></tr></tbody></table></code></pre></figure> <h2 id="optional-nginx">Optional: nginx</h2> <p>Since I used fastapi, the documentation is conveniently included via the openapi specification and can be accessed directly from the api. However in a different setting or additionally you may want to set up and nginx server to serve some static content like documentation.</p> <p>Note, that it’s also possible to use nginx as a front and wire it up to our api, so that everything is delivered through nginx. Such a setup would make it possible to serve - for example - different services from different domain names (but still from the single VPS).</p> <p>However configuring this is beyond the aim of this post, so I leave it at that.</p>]]></content><author><name></name></author><category term="linux"/><category term="cli"/><category term="python"/><summary type="html"><![CDATA[A minimal setup to run a web app on a vps]]></summary></entry><entry><title type="html">rsync quick reference</title><link href="https://drivel.karuken.quest/blog/2023/rsync-recipes-and-faq/" rel="alternate" type="text/html" title="rsync quick reference"/><published>2023-12-02T00:00:00+00:00</published><updated>2023-12-02T00:00:00+00:00</updated><id>https://drivel.karuken.quest/blog/2023/rsync-recipes-and-faq</id><content type="html" xml:base="https://drivel.karuken.quest/blog/2023/rsync-recipes-and-faq/"><![CDATA[<p><code class="language-plaintext highlighter-rouge">rsync</code> is the go-to solution to quickly synchronize files between systems. It’s pretty versatile, but with that power also comes complexity in it’s usage. So let’s go over some common ones and clear up some confusion on the way.</p> <h2 id="common-rsync-options">common rsync options</h2> <p>TODO: important options</p> <dl> <dt><code class="language-plaintext highlighter-rouge">--dry-run, -n</code></dt> <dd>Dry run only simulates what would happen and is a good option to use if you are not sure or if an error would have bad consequences (such as when using <code class="language-plaintext highlighter-rouge">--delete</code>). Pipe the command through <code class="language-plaintext highlighter-rouge">grep del</code> to make sure to catch any delete actions.</dd> <dt><code class="language-plaintext highlighter-rouge">--archive, -a</code></dt> <dd>Archive mode, is a pretty common mode and a short cut of a bunch of other modes (<code class="language-plaintext highlighter-rouge">-rlptgoD</code>). It basically means preserve all file attributes (almost all) and do it recursively. It’s the basic go-to option for syncing directories.</dd> <dt><code class="language-plaintext highlighter-rouge">--delete</code></dt> <dd>Delete files the exist at destination but not at origin. Be careful with this one - if you mix up trailing slashes for example this will potentially delete a large number of files.</dd> <dt><code class="language-plaintext highlighter-rouge">--update, -u</code></dt> <dd>Ignores all files that exist on the destination and have a newer mtime than the file on the origin. In other words, this only updates older files on the destination. (If the mtime is equal, but size is different the destination will also be updated.)</dd> <dt><code class="language-plaintext highlighter-rouge">--ignore-existing</code></dt> <dd>Ignores all existing files, but will update the destination with any new files that exist at the origin. This does not ignore directories.</dd> <dt><code class="language-plaintext highlighter-rouge">--filter 'this'</code></dt> <dd>Filters out expressions that will not be synchronized from origin to destination. For example directories or files - also regular expressions are possible. For multiple strings just use the filter option repeatedly. Filters can be quite complex - details can be found in the “Filter Rules” section of the manpage. Most common usage: to exclude a pattern: <code class="language-plaintext highlighter-rouge">--filter '- pattern'</code>. It’s even possible to make the contents of a gitignore file part of a filter: <code class="language-plaintext highlighter-rouge">--filter ':- .gitignore'</code>. This will merge the contents of the gitignore file into the filter rules including any <code class="language-plaintext highlighter-rouge">.gitignore</code> files found in any subdirectory of the origin directory tree.</dd> </dl> <ul> <li><code class="language-plaintext highlighter-rouge">-avz</code></li> </ul> <h2 id="rsync-easy-ssh">rsync easy ssh</h2> <p><code class="language-plaintext highlighter-rouge">rsync</code> works over a number of protocols, most commonly ssh. With a little configuration this becomes very convenient. If you are using ssh public/private key pairs to log into your different boxes, you can easily set up shortcuts for these in <code class="language-plaintext highlighter-rouge">.ssh/config</code>. Here is an example:</p> <figure class="highlight"><pre><code class="language-config" data-lang="config"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="c">#.ssh/config
</span><span class="n">Host</span> <span class="n">blackbox</span>
        <span class="n">Hostname</span> <span class="m">68</span>.<span class="m">89</span>.<span class="m">147</span>.<span class="m">230</span>
        <span class="n">User</span> <span class="n">johnathan</span>.<span class="n">surname</span>

<span class="n">Host</span> <span class="n">pandora</span>
        <span class="n">Hostname</span> <span class="m">86</span>.<span class="m">98</span>.<span class="m">174</span>.<span class="m">305</span>
        <span class="n">User</span> <span class="n">john</span>

<span class="n">Host</span> <span class="n">pandora</span>-<span class="n">local</span>
        <span class="n">Hostname</span> <span class="m">192</span>.<span class="m">168</span>.<span class="m">0</span>.<span class="m">7</span>
        <span class="n">User</span> <span class="n">john</span>

<span class="n">Host</span> <span class="n">pandora</span>-<span class="n">local</span>-<span class="n">private</span>
        <span class="n">Hostname</span> <span class="m">192</span>.<span class="m">168</span>.<span class="m">0</span>.<span class="m">7</span>
        <span class="n">User</span> <span class="n">js</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>These lines basically set up shortcuts for the host/username-combination, so you don’t have to remember them yourself - just set and forget. With the keys, the login becomes effectively passwordless if the keys are available via ssh-agent for example (I’ll cover that in another post).</p> <p>The nifty thing in combination with <code class="language-plaintext highlighter-rouge">rsync</code> is, that once set up, this will enable path completion for your rsync command. So entering something like <code class="language-plaintext highlighter-rouge">rsync blackbox:~/</code> and hitting tab will automatically expand to <code class="language-plaintext highlighter-rouge">rsync blackbox:/home/jonathan.surname/</code>, add the first couple of letters of the directory you want to sync from, hit tab again and ssh will look up possible path completions in the the background. You can even hit tab twice after the slash and ssh will present you with a list of paths that are available, all without ever leaving the rsync line.</p> <h2 id="rsync-and-trailing-slashes">rsync and trailing slashes</h2> <p>A common confusion with <code class="language-plaintext highlighter-rouge">sync</code> is weather to use trailing slashes or not on the <em>source</em> directory (trailing slash presence doesnt matter for the destination directory).</p> <p>Here is a little mnemonic about this: if there is only the name of the directory itself <em>without</em> the slash, then the directory is the main thing, you name <strong>the_directory</strong>. But if you add a trailing slash, the directory that you named is not the main thing anymore - the slash adds a directional meaning <strong>from within</strong> the directory*.</p> <p><code class="language-plaintext highlighter-rouge">some_dir</code> (w/o trailing <code class="language-plaintext highlighter-rouge">/</code>): <strong>the_directory</strong></p> <p><code class="language-plaintext highlighter-rouge">some_dir/</code> (with trailing <code class="language-plaintext highlighter-rouge">/</code>): from <strong>within</strong> the directory</p> <p>So simply put: The slash adds direction.</p>]]></content><author><name></name></author><category term="cli"/><category term="linux"/><summary type="html"><![CDATA[Frequent rsync commands and common confusion]]></summary></entry><entry><title type="html">Code highlighting in jekyll</title><link href="https://drivel.karuken.quest/blog/2023/jekyll-code-highlight/" rel="alternate" type="text/html" title="Code highlighting in jekyll"/><published>2023-12-01T00:00:00+00:00</published><updated>2023-12-01T00:00:00+00:00</updated><id>https://drivel.karuken.quest/blog/2023/jekyll-code-highlight</id><content type="html" xml:base="https://drivel.karuken.quest/blog/2023/jekyll-code-highlight/"><![CDATA[<p>Code highlighting is a standard feature in jekyll. There are plenty of examples and explanations out there, for example from the <a href="https://jun711.github.io/web/how-to-highlight-code-on-a-Jekyll-site-syntax-highlighting/">Jun711 blog</a> and many other sources. I wont repeat the basic functionality here. This is how this looks for python:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="c1">#!/usr/bin/env python
# syntax highlighting
</span>
<span class="k">class</span> <span class="nc">Bar</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>  <span class="c1"># Class definition
</span>    <span class="k">def</span> <span class="nf">__enter__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">__exit__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">foo</span><span class="p">():</span>  <span class="c1"># function definition
</span>        <span class="k">if</span> <span class="sh">'</span><span class="s">string</span><span class="sh">'</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[]</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>I do want to talk about highlighting <em>individual lines</em> within code blocks: Jekyll uses the <a href="https://github.com/rouge-ruby/rouge">rouge highlighter</a> which has the option to mark individual lines to point out individual code parts.</p> <p>That however is not implemented in jekyll itself, so while the underlying engine has the option jekyll doesnt tie into it. It took me a while and a few unsucessful workaround-attempts and digging in github comments to finally find out that the necessary parsing has finally been added and will be published with the 4.4.0 release of jekyll as noted in <a href="https://jekyllrb.com/docs/liquid/tags/#marking-specific-lines">this section of the jekyll docs</a>.</p> <p>However this will not allow to use this feature in markdown code blocks, only using the liquid markup. So the full feature will look something like this:</p> <p>{% highlight python linenos mark_lines=”3 4 5” %} <br/> code goes here <br/> {% endhighlight %}</p> <p>And - as soon as I have migrated to jekyll 4.4.0, the code below should show some highlighted lines:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="c1">#!/usr/bin/env python                       &lt;-- should be marked
# syntax highlighting
</span>
<span class="k">class</span> <span class="nc">Bar</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>  <span class="c1"># Class definition      # &lt;-- should be marked
</span>    <span class="k">def</span> <span class="nf">__enter__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">__exit__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">foo</span><span class="p">():</span>  <span class="c1"># function definition
</span>        <span class="k">if</span> <span class="sh">'</span><span class="s">string</span><span class="sh">'</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[]</span>
</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name></name></author><category term="jekyll"/><category term="ruby"/><category term="liquid"/><summary type="html"><![CDATA[Highlight code in jekyll and mark individual lines]]></summary></entry><entry><title type="html">Easy-automate git deploys</title><link href="https://drivel.karuken.quest/blog/2023/webhooks/" rel="alternate" type="text/html" title="Easy-automate git deploys"/><published>2023-12-01T00:00:00+00:00</published><updated>2023-12-01T00:00:00+00:00</updated><id>https://drivel.karuken.quest/blog/2023/webhooks</id><content type="html" xml:base="https://drivel.karuken.quest/blog/2023/webhooks/"><![CDATA[<p>This theme implements a built-in Jekyll feature, the use of Rouge, for syntax highlighting. It supports more than 100 languages. This example is in C++. All you have to do is wrap your code in markdown code tags:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">c++
</span><span class="n">code</span> <span class="n">code</span> <span class="n">code</span>
<span class="p">```</span>
</code></pre></div></div> <p>foo</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>For displaying code in a list item, you have to be aware of the indentation, as stated in this <a href="https://stackoverflow.com/questions/34987908/embed-a-code-block-in-a-list-item-with-proper-indentation-in-kramdown/38090598#38090598">Stackoverflow answer</a>. You must indent your code by <strong>(3 * bullet_indent_level)</strong> spaces. This is because kramdown (the markdown engine used by Jekyll) indentation for the code block in lists is determined by the column number of the first non-space character after the list item marker. For example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">1.</span> We can put fenced code blocks inside nested bullets, too.
<span class="p">   1.</span> Like this:
      <span class="p">```</span><span class="nl">c
</span>      <span class="n">printf</span><span class="p">(</span><span class="s">"Hello, World!"</span><span class="p">);</span>
      <span class="p">```</span>
<span class="p">
   2.</span> The key is to indent your fenced block in the same line as the first character of the line.
</code></pre></div></div> <p>Which displays:</p> <ol> <li>We can put fenced code blocks inside nested bullets, too. <ol> <li>Like this: <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printf</span><span class="p">(</span><span class="s">"Hello, World!"</span><span class="p">);</span>
</code></pre></div> </div> </li> <li>The key is to indent your fenced block in the same line as the first character of the line.</li> </ol> </li> </ol> <p>By default, it does not display line numbers. If you want to display line numbers for every code block, you can set <code class="language-plaintext highlighter-rouge">kramdown.syntax_highlighter_opts.block.line_numbers</code> to true in your <code class="language-plaintext highlighter-rouge">_config.yml</code> file.</p> <p>If you want to display line numbers for a specific code block, all you have to do is wrap your code in a liquid tag:</p> <p>{% highlight c++ linenos %} <br/> code code code <br/> {% endhighlight %}</p> <p>The keyword <code class="language-plaintext highlighter-rouge">linenos</code> triggers display of line numbers. Produces something like this:</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name></name></author><category term="git"/><category term="jekyll"/><category term="nginx"/><category term="deployment"/><summary type="html"><![CDATA[Use webhook as a quick way to automatically deploy git repo]]></summary></entry></feed>