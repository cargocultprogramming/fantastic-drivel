<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://drivel.karuken.quest/feed.xml" rel="self" type="application/atom+xml"/><link href="https://drivel.karuken.quest/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-12-10T14:55:35+00:00</updated><id>https://drivel.karuken.quest/feed.xml</id><title type="html">karuken</title><subtitle>Just another blog - more of a gist collection really, might be useful though. </subtitle><entry><title type="html">Creative commons font icons</title><link href="https://drivel.karuken.quest/blog/2023/creative-commons-font-icons/" rel="alternate" type="text/html" title="Creative commons font icons"/><published>2023-12-08T00:00:00+00:00</published><updated>2023-12-08T00:00:00+00:00</updated><id>https://drivel.karuken.quest/blog/2023/creative-commons-font-icons</id><content type="html" xml:base="https://drivel.karuken.quest/blog/2023/creative-commons-font-icons/"><![CDATA[<p>A lot of websites use the <a href="https://creativecommons.org/">Creative Commons</a> license(es) to share their creative work. I wanted to do so on this blog, but was confronted with two options I didn’t like. I could either show the license as image or as a simple text, like for example <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0</a> or include an <a href="https://creativecommons.org/mission/downloads/">image from the creative commons website</a>.</p> <p>It’s also possible to include the icons as svg files for example from fontawesome or similar icon libraries.</p> <p>However, I went with another option, by including the minimal webfont from <a href="https://www.ctrl.blog/entry/creative-commons-unicode-fallback-font.html">Daniel Aleksandersen’s blog</a>.</p> <p>I include the font definition in the css definitions for the blog, restricted to the footer, where I want to use them:</p> <figure class="highlight"><pre><code class="language-css" data-lang="css"><span class="k">@font-face</span> <span class="p">{</span>
  <span class="py">font-display</span><span class="p">:</span> <span class="n">swap</span><span class="p">;</span>
  <span class="nl">font-family</span><span class="p">:</span> <span class="n">CCSymbols</span><span class="p">;</span>
  <span class="nl">font-synthesis</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="nl">src</span><span class="p">:</span> <span class="sx">url(CCSymbols.woff2)</span> <span class="n">format</span><span class="p">(</span><span class="n">woff2</span><span class="p">),</span>
       <span class="sx">url(CCSymbols.woff)</span>  <span class="n">format</span><span class="p">(</span><span class="n">woff</span><span class="p">);</span>
  <span class="py">unicode-range</span><span class="p">:</span> <span class="n">u</span><span class="err">+</span><span class="n">a9</span><span class="p">,</span> <span class="n">u</span><span class="err">+</span><span class="m">229</span><span class="n">c</span><span class="p">,</span>
                 <span class="n">u</span><span class="err">+</span><span class="m">1</span><span class="n">f10d-1f10f</span><span class="p">,</span>
                 <span class="n">u</span><span class="err">+</span><span class="m">1</span><span class="n">f16d-1f16f</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">footer</span> <span class="p">{</span><span class="nl">font-family</span><span class="p">:</span> <span class="nb">sans-serif</span><span class="p">,</span> <span class="n">CCSymbols</span><span class="p">;}</span></code></pre></figure> <p>The tiny font files, that I downloaded from the blog linked above, need to be dropped into <code class="language-plaintext highlighter-rouge">assets/css/</code> for jekyll.</p> <p>In the html-footer then, I can use the html notation for the symbols (e.g. from <a href="https://en.wikipedia.org/wiki/Creative_Commons_license">https://en.wikipedia.org/wiki/Creative_Commons_license</a>) and the browser will render the symbols in the first webfont it encounters, that support the symbols. In our case this is the <code class="language-plaintext highlighter-rouge">CCSymbols</code> font. Here is how this looks when modifying the footer of a jekyll page with the al-folio theme.</p> <figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;footer&gt;</span>
    ...
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-12 col-md-3 container"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"container"</span> <span class="na">style=</span><span class="s">"font-size:20px; vertical-align: middle;"</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">"https://creativecommons.org/licenses/by-nc-sa/4.0/"</span><span class="nt">&gt;</span><span class="ni">&amp;#127341;&amp;#127343;&amp;#127247;&amp;#127246;</span><span class="nt">&lt;/a&gt;&lt;/span&gt;</span>
        2023 cargocultprg
    <span class="nt">&lt;/div&gt;</span>
    ...
<span class="nt">&lt;/footer&gt;</span></code></pre></figure> <p>That allows me to show the symbols as <em>normal</em> text that I can use in a simple link. The css-attribute <code class="language-plaintext highlighter-rouge">vertical-align: middle</code> ensures that all symbols appear alligned with the other text content.</p> <p>For the final result take a look at the lower-left of the footer of this website.</p>]]></content><author><name></name></author><category term="jekyll"/><category term="css"/><summary type="html"><![CDATA[Include creative commons symbols as unicode icons in your website]]></summary></entry><entry><title type="html">Custom shell login message</title><link href="https://drivel.karuken.quest/blog/2023/custom-login-message/" rel="alternate" type="text/html" title="Custom shell login message"/><published>2023-12-03T00:00:00+00:00</published><updated>2023-12-03T00:00:00+00:00</updated><id>https://drivel.karuken.quest/blog/2023/custom-login-message</id><content type="html" xml:base="https://drivel.karuken.quest/blog/2023/custom-login-message/"><![CDATA[<p>If you log into different servers with ssh frequently it may make sense to display a custom welcome message for the server.</p> <p>This is extremely easy to set up and helps to stay aware of your (shell) surroundings, so to speak.</p> <p>To implement this, I like to display the ascii art of the server nickname as welcome message. I’m usually using the same nickname that I also use in my ssh configuration - for the sake of this example, we’ll assume the name is <code class="language-plaintext highlighter-rouge">blackbox</code>.</p> <p>First head over to <a href="https://patorjk.com/software/taag">https://patorjk.com/software/taag</a> or <a href="https://www.asciiart.eu/text-to-ascii-art">https://www.asciiart.eu/text-to-ascii-art</a>, enter the nickname, pick a style you like and copy the result. It might look something like this:</p> <pre><code class="language-ascii"> _     _            _    _               
| |   | |          | |  | |              
| |__ | | __ _  ___| | _| |__   _____  __
| '_ \| |/ _` |/ __| |/ / '_ \ / _ \ \/ /
| |_) | | (_| | (__|   &lt;| |_) | (_) &gt;  &lt; 
|_.__/|_|\__,_|\___|_|\_\_.__/ \___/_/\_\

</code></pre> <p>Now all you need to do is to stick this into <code class="language-plaintext highlighter-rouge">/etc/motd</code> (create it, if it doesnt exist) and you are good to go. The ascii label will be included at the end of the usual login message so your login will look something like this:</p> <pre><code class="language-ascii">$ ssh blackbox

Welcome to Ubuntu 22.04.3 LTS (GNU/Linux 5.15.0-89-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Sun Dec  3 05:42:01 PM UTC 2023

  System load:  0.0               Processes:               129
  Usage of /:   3.0% of 74.79GB   Users logged in:         1
  Memory usage: 3%                IPv4 address for enp7s0: 10.0.0.2
  Swap usage:   0%                IPv4 address for eth0:   86.35.12.232

 * Strictly confined Kubernetes makes edge and IoT secure. Learn how MicroK8s
   just raised the bar for easy, resilient and secure K8s cluster deployment.

   https://ubuntu.com/engage/secure-kubernetes-at-the-edge

Expanded Security Maintenance for Applications is not enabled.

1 update can be applied immediately.
To see these additional updates run: apt list --upgradable

Enable ESM Apps to receive additional future security updates.
See https://ubuntu.com/esm or run: sudo pro status

 _     _            _    _               
| |   | |          | |  | |              
| |__ | | __ _  ___| | _| |__   _____  __
| '_ \| |/ _` |/ __| |/ / '_ \ / _ \ \/ /
| |_) | | (_| | (__|   &lt;| |_) | (_) &gt;  &lt; 
|_.__/|_|\__,_|\___|_|\_\_.__/ \___/_/\_\

Last login: Sun Dec  3 17:04:45 2023 from 106.23.107.216

cargocultprg@blackbox:~#
</code></pre> <p>For a more fine-grained configuration, take a look at the files <code class="language-plaintext highlighter-rouge">/etc/issue</code> and <code class="language-plaintext highlighter-rouge">/etc/issue.net</code> as well as the <code class="language-plaintext highlighter-rouge">banner</code> setting in <code class="language-plaintext highlighter-rouge">/etc/ssh/sshd_config</code>.</p> <p><code class="language-plaintext highlighter-rouge">motd</code> is displayed after login at the end of all other login messages, <code class="language-plaintext highlighter-rouge">issue</code> is displayed before login for local users and <code class="language-plaintext highlighter-rouge">issue.net</code> is the equivalent for users that connect via network.</p>]]></content><author><name></name></author><category term="linux"/><category term="cli"/><summary type="html"><![CDATA[Display a custom shell login message for ssh]]></summary></entry><entry><title type="html">Configure a VPS for web apps</title><link href="https://drivel.karuken.quest/blog/2023/webapp-setup-on-vps/" rel="alternate" type="text/html" title="Configure a VPS for web apps"/><published>2023-12-03T00:00:00+00:00</published><updated>2023-12-03T00:00:00+00:00</updated><id>https://drivel.karuken.quest/blog/2023/webapp-setup-on-vps</id><content type="html" xml:base="https://drivel.karuken.quest/blog/2023/webapp-setup-on-vps/"><![CDATA[<p>A VPS (<em>V</em>irtual <em>P</em>rivate <em>S</em>erver) is a cheap way to run web apps for hobby projects. Basically you are renting a small virtual server, that will not have any form of guaranteed performance (since it shares hardware with other VPS instances), but is otherwise a full-fledged (linux) server with the full power of the platform.</p> <p>There are platform-as-a-service offers out there like heroku or fly.io and similar. These have the advantage that they handle much of the setup from databases to backups, but have the disadvantage that you are (a) tied to the platform with respect to costs and (b) need to learn platform-specific setup scripts.</p> <p>Imho it’s better to keep such dependencies at a minimum. While they promise to save time and costs, more often than not, they do neither, when free plans are suddenly discontinued and the setup interface changes often.</p> <p>It’s better to take a day or two to learn to set up things yourself. There’s some initial learning cost, but for hobby projects you will be able to run a number of different projects on the same server that’ll cost you just a couple of EUR per month.</p> <p>In case one of your projects booms and requires a more serious setup to scale, you will be better informed about the options and can then migrate to a dedicated server.</p> <p>A web app in the sense we are using it here can be for example a django or fastapi programm, a website with javascript and anything in between.</p> <p>I’m not going into details of the setup here, but just go over a minimal configuration that allows you to run an app on the server. For a production server with serious traffic and business value you will need more configuration from ssl certificates and domain names over security and backup to various databases and maybe queuing systems, automated deploy and much more. For the sake of clarity I’ll omit all this and concentrate only on essential steps:</p> <ol> <li><a href="#server-provide-and-image">Server provider and image</a>: Where to set up your VPS and which image to use</li> <li><a href="#server-update-and-installation">Installation of software</a>: Update the server and install basic software</li> <li><a href="#web-app-runtime-environment">Web app environment</a>: Create a runtime environment for the web app</li> <li><a href="#upload-the-web-app">Upload web app</a>: Get the code into place with the right permissions</li> <li><a href="#install-the-webapp-poetry-venv">Install the venv</a>: Install the direct runtime depencies (via poetry in this example)</li> <li><a href="#running-the-web-app">Running the app</a>: Running the webapp</li> <li><a href="#monitor-and-auto-restart">Monitor and (re)start</a>: Automate the (re)start of the runscript</li> <li><a href="#optional-nginx">Optional webserver</a>: Set up nginx for additional flexibility</li> </ol> <h2 id="server-provide-and-image">Server provide and image</h2> <p>I’m assuming you have a VPS up and running and that you have root access to it. Ideally take some time to set up ssh keys for easy, passwordless login. For the examples here, I assume that you are running ubuntu (server, i.e. without graphical user interface).</p> <p>Your VPS provider (e.g. <a href="https://www.netcup.de/">https://www.netcup.de/</a>, <a href="https://www.hetzner.com/">https://www.hetzner.com/</a>, <a href="https://www.digitalocean.com/">https://www.digitalocean.com/</a> to name a few) will typicall provide a starter image to get you going. Unless you have a compelling reason to pick something exotic stay with a popular image, simply since maintenance and (community) support will be better.</p> <h2 id="server-update-and-installation">Server update and installation</h2> <p>For our project we assume a <a href="https://fastapi.tiangolo.com/">fastapi</a> app, that is configured with <a href="https://python-poetry.org/">python-poetry</a> as environment manager.</p> <p>Upgrade the server and install the packages we need:</p> <figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="nv">$ </span><span class="nb">sudo </span>apt update <span class="o">&amp;&amp;</span> apt upgrade <span class="o">&amp;&amp;</span> apt autoremove
<span class="o">[</span>... output ...]
<span class="nv">$ </span><span class="nb">sudo </span>apt <span class="nb">install </span>supervisor python-is-python3
<span class="o">[</span>... output ...]
<span class="nv">$ </span>python <span class="nt">--version</span>
Python 3.10.12
<span class="nv">$ </span><span class="nb">sudo </span>curl <span class="nt">-sSL</span> https://install.python-poetry.org | python3 -
</pre></td></tr></tbody></table></code></pre></figure> <p>The requirements on top of the server image are minimal. Depending on the type of web app that you run, the software requirements might be a bit different - for example you might require nginx, celery, postgresql etc. but my app just needs python and python-poetry.</p> <p>The installation of <code class="language-plaintext highlighter-rouge">supervisor</code> is a convenience setup that isn’t strictly necessary, but helpful in controlling the web app.</p> <h2 id="web-app-runtime-environment">Web app runtime environment</h2> <p>In good old unix tradition I’ll run my web app as a dedicated user with limited system access. Since my server only has the job to run web apps and don’t has any regular users, I’ll also serve content from <code class="language-plaintext highlighter-rouge">/home/mywebapp/</code>. In a different setting I might choose something like <code class="language-plaintext highlighter-rouge">/var/mywebapp</code> or even <code class="language-plaintext highlighter-rouge">/var/webapps/mywebapp</code>.</p> <figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre><span class="nv">$ </span><span class="nb">sudo </span>groupadd <span class="nt">--system</span> webapp
<span class="nv">$ </span><span class="nb">sudo </span>useradd <span class="nt">--system</span> <span class="nt">--gid</span> webapps <span class="nt">--shell</span> /bin/bash <span class="nt">--home</span> /home/mywebapp mywebapp
<span class="nv">$ </span><span class="nb">sudo mkdir</span> /home/mywebapp
<span class="nv">$ </span><span class="nb">sudo chown </span>mywebapp:webapps /home/mywebapp
</pre></td></tr></tbody></table></code></pre></figure> <figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre><span class="nv">$ </span><span class="nb">sudo </span>su - mywebapp
mywebapp<span class="nv">$ </span>curl <span class="nt">-sSL</span> https://install.python-poetry.org | python3 -

Retrieving Poetry metadata

<span class="c"># Welcome to Poetry!</span>

This will download and <span class="nb">install </span>the latest version of Poetry,
a dependency and package manager <span class="k">for </span>Python.

It will add the <span class="sb">`</span>poetry<span class="sb">`</span> <span class="nb">command </span>to Poetry<span class="s1">'s bin directory, located at:

/home/mywebapp/.local/bin

You can uninstall at any time by executing this script with the --uninstall option,
and these changes will be reverted.

Installing Poetry (1.7.1): Done

Poetry (1.7.1) is installed now. Great!

To get started you need Poetry'</span>s bin directory <span class="o">(</span>/home/mywebapp/.local/bin<span class="o">)</span> <span class="k">in </span>your <span class="sb">`</span>PATH<span class="sb">`</span>
environment variable.

Add <span class="sb">`</span><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"/home/mywebapp/.local/bin:</span><span class="nv">$PATH</span><span class="s2">"</span><span class="sb">`</span> to your shell configuration file.

Alternatively, you can call Poetry explicitly with <span class="sb">`</span>/home/mywebapp/.local/bin/poetry<span class="sb">`</span><span class="nb">.</span>

You can <span class="nb">test </span>that everything is <span class="nb">set </span>up by executing:

<span class="sb">`</span>poetry <span class="nt">--version</span><span class="sb">`</span>

mywebapp<span class="nv">$ </span>vim .bashrc  <span class="c"># add the "export PATH" line from above</span>
mywebapp<span class="nv">$ </span><span class="nb">source</span> .bashrc
mywebapp<span class="nv">$ </span>poetry <span class="nt">--version</span>
Poetry <span class="o">(</span>version 1.7.1<span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></figure> <h2 id="upload-the-web-app">Upload the web app</h2> <p>At this point I have a webapp on my development computer, that I tested there locally. It doesn’t really matter how you get the app onto your server, just make sure you upload it to the <code class="language-plaintext highlighter-rouge">/home/mywebapp</code> directory and set proper permissions.</p> <p>In a more permanent setting I’d do this by either pulling the web app in via git manually or periodically or to set up a webhook that will be notified if a git-repo is updaten and will then take care of the deployment work (likely something like <code class="language-plaintext highlighter-rouge">git pull</code>, run tests, activate).</p> <p>Here we keep it simply and just transfer our app with rsync. We are running the remote part of rsync by specifying <code class="language-plaintext highlighter-rouge">--rsync-path</code> so that we can use our login user for the ssh login, but change to our webapp user for saving the files (we run the remote rsync process as user <code class="language-plaintext highlighter-rouge">mywebapp</code>)(see <a href="https://unix.stackexchange.com/questions/240814/rsync-with-different-user">this stackexchange thread for details</a>). From the development box:</p> <figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nv">$ </span>rsync <span class="nt">--rsync-path</span> <span class="s1">'sudo -u mywebapp rsync'</span> <span class="nt">-avP</span> /home/cargocultprg/projects/mywebapp/ aera-incognita:/home/mywebapp/
</pre></td></tr></tbody></table></code></pre></figure> <p>You can test the command using the option <code class="language-plaintext highlighter-rouge">--dry-run</code> first, to make sure it lands right. By the end of this you should have the source code of your web app on the server in the directory <code class="language-plaintext highlighter-rouge">/home/mywebapp</code> with all files set to be owned by user <code class="language-plaintext highlighter-rouge">mywebapp</code>.</p> <h2 id="install-the-webapp-poetry-venv">Install the webapp (poetry) venv</h2> <p>As mentioned, I’m using python-poetry to manage the virtual environment for my webapp. Since I already installed poetry, I can now simply run <code class="language-plaintext highlighter-rouge">poetry install</code> to set up the virtual environment on the server.</p> <p>First we want to make sure that the venv is created in our project root directory by setting the respective poetry setting true: <code class="language-plaintext highlighter-rouge">poetry config virtualenvs.in-project true</code>. To double check:</p> <figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="nv">$ </span>poetry config <span class="nt">--list</span>
cache-dir <span class="o">=</span> <span class="s2">"/home/mywebapp/.cache/pypoetry"</span>
experimental.system-git-client <span class="o">=</span> <span class="nb">false
</span>installer.max-workers <span class="o">=</span> null
installer.modern-installation <span class="o">=</span> <span class="nb">true
</span>installer.no-binary <span class="o">=</span> null
installer.parallel <span class="o">=</span> <span class="nb">true
</span>virtualenvs.create <span class="o">=</span> <span class="nb">true
</span>virtualenvs.in-project <span class="o">=</span> <span class="nb">true
</span>virtualenvs.options.always-copy <span class="o">=</span> <span class="nb">false
</span>virtualenvs.options.no-pip <span class="o">=</span> <span class="nb">false
</span>virtualenvs.options.no-setuptools <span class="o">=</span> <span class="nb">false
</span>virtualenvs.options.system-site-packages <span class="o">=</span> <span class="nb">false
</span>virtualenvs.path <span class="o">=</span> <span class="s2">"{cache-dir}/virtualenvs"</span>  <span class="c"># /home/mywebapp/.cache/pypoetry/virtualenvs</span>
virtualenvs.prefer-active-python <span class="o">=</span> <span class="nb">false
</span>virtualenvs.prompt <span class="o">=</span> <span class="s2">"{project_name}-py{python_version}"</span>
warnings.export <span class="o">=</span> <span class="nb">true</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>The we can install the virtual environment, just like we used it in development:</p> <figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="nv">$ </span>poetry <span class="nb">install
</span>Creating virtualenv mywebapp <span class="k">in</span> /home/mywebapp/.venv
Installing dependencies from lock file

Package operations: 40 installs, 0 updates, 0 removals

  • Installing exceptiongroup <span class="o">(</span>1.2.0<span class="o">)</span>
  • Installing idna <span class="o">(</span>3.6<span class="o">)</span>
  • Installing sniffio <span class="o">(</span>1.3.0<span class="o">)</span>
  • Installing anyio <span class="o">(</span>4.1.0<span class="o">)</span>
  • Installing certifi <span class="o">(</span>2023.11.17<span class="o">)</span>
  ...
</pre></td></tr></tbody></table></code></pre></figure> <h2 id="running-the-web-app">Running the web app</h2> <p>With the virtual environment installed, I can activate it and run the web app. In my case it’s a python fastAPI app that runs with uvicorn.</p> <figure class="highlight"><pre><code class="language-shell" data-lang="shell"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="nv">$ </span>poetry shell
<span class="o">(</span>mywebapp-py3.10<span class="o">)</span> mywebapp@blackbox:~/fastAPI<span class="nv">$ </span>uvicorn myapidir.myapi:app <span class="nt">--reload</span> 
INFO:     Will watch <span class="k">for </span>changes <span class="k">in </span>these directories: <span class="o">[</span><span class="s1">'/home/mywebapp/fastAPI'</span><span class="o">]</span>
INFO:     Uvicorn running on http://127.0.0.1:8000 <span class="o">(</span>Press CTRL+C to quit<span class="o">)</span>
INFO:     Started reloader process <span class="o">[</span>39036] using WatchFiles
INFO:     Started server process <span class="o">[</span>39038]
INFO:     Waiting <span class="k">for </span>application startup.
INFO:     Application startup complete.
<span class="o">[</span>Strg + C]
INFO:     Shutting down
INFO:     Waiting <span class="k">for </span>application shutdown.
INFO:     Application shutdown complete.
INFO:     Finished server process <span class="o">[</span>39038]
INFO:     Stopping reloader process <span class="o">[</span>39036]
</pre></td></tr></tbody></table></code></pre></figure> <p>To automate this, we’ll create a minimal shell script like this:</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="c">#!/bin/bash</span>
<span class="c"># /home/mywebapp/.local/bin/mywebapp_run</span>

<span class="nv">NAME</span><span class="o">=</span><span class="s2">"mywebapp"</span>
<span class="nv">APPDIR</span><span class="o">=</span>/home/webapp/fastAPI/
<span class="nv">USER</span><span class="o">=</span>mywebapp

<span class="nb">echo</span> <span class="s2">"starting </span><span class="nv">$NAME</span><span class="s2"> as </span><span class="sb">`</span><span class="nb">whoami</span><span class="sb">`</span><span class="s2">"</span>

<span class="c"># activate venv</span>
<span class="nb">cd</span> <span class="nv">$APPDIR</span>

<span class="c"># run webapp</span>
<span class="nb">exec</span> /home/mywebapp/.local/bin/poetry run uvicorn myapidir.myapi:app <span class="nt">--reload</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>Copy it to <code class="language-plaintext highlighter-rouge">.local/bin/mywebapp_run</code>, set it executable <code class="language-plaintext highlighter-rouge">chmod u+x ~/.local/bin/mywebapp_run</code> and double check it, buy running it as your mywebapp user.</p> <h2 id="monitor-and-auto-restart">Monitor and auto-restart</h2> <p>At this point I have a single executable that runs my app. Now I want to make sure that it is running on server restart. I set this up with <code class="language-plaintext highlighter-rouge">supervisor</code> which I installed at the start.</p> <p>The following script tells supervisor what to do:</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="c">#/etc/supervisor/conf.d/mywebapp.conf</span>
<span class="o">[</span>program:mywebapp]
<span class="nb">command</span> <span class="o">=</span> /home/mywebapp/.local/bin/mywebapp_run
user <span class="o">=</span> mywebapp
stdout_logfile <span class="o">=</span> /home/mywebapp/fastAPI/logs/supervisor.log
redirect_stderr <span class="o">=</span> <span class="nb">true</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>Here’s how to start supervisor:</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre><span class="nv">$ </span><span class="nb">sudo </span>systemctl <span class="nb">enable </span>supervisor
<span class="nv">$ </span><span class="nb">sudo </span>systemctl restart supervisor
<span class="nv">$ </span><span class="nb">sudo </span>supervisorctl status mywebapp
</pre></td></tr></tbody></table></code></pre></figure> <p>For every change of the script in <code class="language-plaintext highlighter-rouge">/etc/supervisor/conf.d/mywebapp.conf</code> supervisor must be restarted. Now supervisorctl can control the webapp:</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="nv">$ </span><span class="nb">sudo </span>supervisorctl stop mywebapp
mywebapp: stopped
<span class="nv">$ </span><span class="nb">sudo </span>supervisorctl start mywebapp
mywebapp: started
<span class="nv">$ </span>supervisorctl status mywebapp
mywebapp             RUNNING   pid 40368, <span class="nb">uptime </span>0:01:14
</pre></td></tr></tbody></table></code></pre></figure> <h2 id="optional-nginx">Optional: nginx</h2> <p>Since I used fastapi, the documentation is conveniently included via the openapi specification and can be accessed directly from the api. However in a different setting or additionally you may want to set up and nginx server to serve some static content like documentation.</p> <p>Note, that it’s also possible to use nginx as a front and wire it up to our api, so that everything is delivered through nginx. Such a setup would make it possible to serve - for example - different services from different domain names (but still from the single VPS).</p> <p>However configuring this is beyond the aim of this post, so I leave it at that.</p>]]></content><author><name></name></author><category term="linux"/><category term="cli"/><category term="python"/><summary type="html"><![CDATA[A minimal setup to run a web app on a vps]]></summary></entry><entry><title type="html">Code highlighting in jekyll</title><link href="https://drivel.karuken.quest/blog/2023/jekyll-code-highlight/" rel="alternate" type="text/html" title="Code highlighting in jekyll"/><published>2023-12-01T00:00:00+00:00</published><updated>2023-12-01T00:00:00+00:00</updated><id>https://drivel.karuken.quest/blog/2023/jekyll-code-highlight</id><content type="html" xml:base="https://drivel.karuken.quest/blog/2023/jekyll-code-highlight/"><![CDATA[<p>Code highlighting is a standard feature in jekyll. There are plenty of examples and explanations out there, for example from the <a href="https://jun711.github.io/web/how-to-highlight-code-on-a-Jekyll-site-syntax-highlighting/">Jun711 blog</a> and many other sources. I wont repeat the basic functionality here. This is how this looks for python:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="c1">#!/usr/bin/env python
# syntax highlighting
</span>
<span class="k">class</span> <span class="nc">Bar</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>  <span class="c1"># Class definition
</span>    <span class="k">def</span> <span class="nf">__enter__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">__exit__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">foo</span><span class="p">():</span>  <span class="c1"># function definition
</span>        <span class="k">if</span> <span class="sh">'</span><span class="s">string</span><span class="sh">'</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[]</span>
</pre></td></tr></tbody></table></code></pre></figure> <p>I do want to talk about highlighting <em>individual lines</em> within code blocks: Jekyll uses the <a href="https://github.com/rouge-ruby/rouge">rouge highlighter</a> which has the option to mark individual lines to point out individual code parts.</p> <p>That however is not implemented in jekyll itself, so while the underlying engine has the option jekyll doesnt tie into it. It took me a while and a few unsucessful workaround-attempts and digging in github comments to finally find out that the necessary parsing has finally been added and will be published with the 4.4.0 release of jekyll as noted in <a href="https://jekyllrb.com/docs/liquid/tags/#marking-specific-lines">this section of the jekyll docs</a>.</p> <p>However this will not allow to use this feature in markdown code blocks, only using the liquid markup. So the full feature will look something like this:</p> <p>{% highlight python linenos mark_lines=”3 4 5” %} <br/> code goes here <br/> {% endhighlight %}</p> <p>And - as soon as I have migrated to jekyll 4.4.0, the code below should show some highlighted lines:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="c1">#!/usr/bin/env python                       &lt;-- should be marked
# syntax highlighting
</span>
<span class="k">class</span> <span class="nc">Bar</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>  <span class="c1"># Class definition      # &lt;-- should be marked
</span>    <span class="k">def</span> <span class="nf">__enter__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">__exit__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">foo</span><span class="p">():</span>  <span class="c1"># function definition
</span>        <span class="k">if</span> <span class="sh">'</span><span class="s">string</span><span class="sh">'</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[]</span>
</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name></name></author><category term="jekyll"/><category term="ruby"/><category term="liquid"/><summary type="html"><![CDATA[Highlight code in jekyll and mark individual lines]]></summary></entry><entry><title type="html">Easy-automate git deploys</title><link href="https://drivel.karuken.quest/blog/2023/webhooks/" rel="alternate" type="text/html" title="Easy-automate git deploys"/><published>2023-12-01T00:00:00+00:00</published><updated>2023-12-01T00:00:00+00:00</updated><id>https://drivel.karuken.quest/blog/2023/webhooks</id><content type="html" xml:base="https://drivel.karuken.quest/blog/2023/webhooks/"><![CDATA[<p>This theme implements a built-in Jekyll feature, the use of Rouge, for syntax highlighting. It supports more than 100 languages. This example is in C++. All you have to do is wrap your code in markdown code tags:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">c++
</span><span class="n">code</span> <span class="n">code</span> <span class="n">code</span>
<span class="p">```</span>
</code></pre></div></div> <p>foo</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>For displaying code in a list item, you have to be aware of the indentation, as stated in this <a href="https://stackoverflow.com/questions/34987908/embed-a-code-block-in-a-list-item-with-proper-indentation-in-kramdown/38090598#38090598">Stackoverflow answer</a>. You must indent your code by <strong>(3 * bullet_indent_level)</strong> spaces. This is because kramdown (the markdown engine used by Jekyll) indentation for the code block in lists is determined by the column number of the first non-space character after the list item marker. For example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">1.</span> We can put fenced code blocks inside nested bullets, too.
<span class="p">   1.</span> Like this:
      <span class="p">```</span><span class="nl">c
</span>      <span class="n">printf</span><span class="p">(</span><span class="s">"Hello, World!"</span><span class="p">);</span>
      <span class="p">```</span>
<span class="p">
   2.</span> The key is to indent your fenced block in the same line as the first character of the line.
</code></pre></div></div> <p>Which displays:</p> <ol> <li>We can put fenced code blocks inside nested bullets, too. <ol> <li>Like this: <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printf</span><span class="p">(</span><span class="s">"Hello, World!"</span><span class="p">);</span>
</code></pre></div> </div> </li> <li>The key is to indent your fenced block in the same line as the first character of the line.</li> </ol> </li> </ol> <p>By default, it does not display line numbers. If you want to display line numbers for every code block, you can set <code class="language-plaintext highlighter-rouge">kramdown.syntax_highlighter_opts.block.line_numbers</code> to true in your <code class="language-plaintext highlighter-rouge">_config.yml</code> file.</p> <p>If you want to display line numbers for a specific code block, all you have to do is wrap your code in a liquid tag:</p> <p>{% highlight c++ linenos %} <br/> code code code <br/> {% endhighlight %}</p> <p>The keyword <code class="language-plaintext highlighter-rouge">linenos</code> triggers display of line numbers. Produces something like this:</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name></name></author><category term="git"/><category term="jekyll"/><category term="nginx"/><category term="deployment"/><summary type="html"><![CDATA[Use webhook as a quick way to automatically deploy git repo]]></summary></entry></feed>